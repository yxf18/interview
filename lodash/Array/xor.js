/*
 * @Author: yangxuefeng yangxuefeng@clinbrain.com
 * @Description:【求差集-所有数组】
 */
/* ================== xor ================== */
// 创建一个唯一值数组，该数组是给定数组的对称差值。结果值的顺序由它们在数组中出现的顺序决定。
{
  _.xor([2, 1], [2, 3]);
  // => [1, 3]
}

/* ================== xorBy ================== */
// 此方法与此类似_.xor，只是它接受iteratee为每个元素调用arrays哪个来生成比较它们的标准。结果值的顺序由它们在数组中出现的顺序决定。迭代器通过一个参数调用：(value)。
{
  _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
  // => [1.2, 3.4]

  // The `_.property` iteratee shorthand.
  _.xorBy([{ x: 1 }], [{ x: 2 }, { x: 1 }], "x");
  // => [{ 'x': 2 }]
}

/* ================== xorWith ================== */
// 此方法与类似_.xor，只是它接受comparator调用哪个来比较 的元素arrays。结果值的顺序由它们在数组中出现的顺序决定。使用两个参数调用比较器：(arrVal, othVal)。
{
  var objects = [
    { x: 1, y: 2 },
    { x: 2, y: 1 },
  ];
  var others = [
    { x: 1, y: 1 },
    { x: 1, y: 2 },
  ];

  _.xorWith(objects, others, _.isEqual);
  // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
}

/**
 *  注意区分：
 *`difference` 和 `xor` 是 Lodash 库中的两个函数，它们的功能略有不同：

1. **difference：** `difference` 函数接收两个或多个数组作为参数，返回一个新数组，其中包含第一个数组中存在但其他数组中不存在的元素。换句话说，它返回的是第一个数组相对于其他数组的补集。

   ```javascript
   _.difference([2, 1], [2, 3]); // => [1]
   ```

2. **xor：** `xor` 函数接收两个或多个数组作为参数，返回一个新数组，其中包含仅出现在一个数组中的元素。换句话说，它返回的是所有数组中的独特元素的集合。

   ```javascript
   _.xor([2, 1], [2, 3]); // => [1, 3]
   ```

综上所述，`difference` 用于找出第一个数组相对于其他数组的差异，而 `xor` 则用于找出所有数组中的独特元素的集合。它们的使用场景和功能略有不同，根据具体的需求选择合适的函数。
 *   */
