/*
 * @Author: yangxuefeng yangxuefeng@clinbrain.com
 * @Description: 【单数组去重】
 */
/* ================== uniq ================== */
// 创建数组的无重复版本，用于SameValueZero相等比较，其中仅保留每个元素的第一次出现。结果值的顺序由它们在数组中出现的顺序决定。
{
  _.uniq([2, 1, 2]);
  // => [2, 1]
}

/* ================== uniqBy ================== */
// 该方法与此类似_.uniq，只是它接受iteratee为每个元素调用的方法来array生成计算唯一性的标准。结果值的顺序由它们在数组中出现的顺序决定。迭代器通过一个参数调用：
// (value)。
{
  _.uniqBy([2.1, 1.2, 2.3], Math.floor);
  // => [2.1, 1.2]

  // The `_.property` iteratee shorthand.
  _.uniqBy([{ x: 1 }, { x: 2 }, { x: 1 }], "x");
  // => [{ 'x': 1 }, { 'x': 2 }]
}

/* ================== uniqWith ================== */
// 此方法与类似_.uniq，只是它接受comparator调用哪个来比较 的元素array。结果值的顺序由它们在数组中出现的顺序决定。使用两个参数调用比较器：(arrVal, othVal)。

{
  var objects = [
    { x: 1, y: 2 },
    { x: 2, y: 1 },
    { x: 1, y: 2 },
  ];

  _.uniqWith(objects, _.isEqual);
  // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
}

/**
 * 注意区分
 * `union` 和 `uniq` 是 Lodash 库中的两个函数，它们的功能略有不同：
1. **union：** `union` 函数接收多个数组作为参数，返回一个包含所有参数数组中唯一值的新数组。它会将所有数组中的元素合并到一个新数组中，并确保新数组中的元素不重复。如果某个元素在多个数组中出现，则只会在新数组中保留一次。

   ```javascript
   _.union([2, 1], [2, 3]); // => [2, 1, 3]
   ```

2. **uniq：** `uniq` 函数接收一个数组作为参数，返回一个去重后的新数组，即返回数组中所有不重复的元素。与 `union` 不同，`uniq` 只接收一个数组作为参数，并且只会处理该数组中的元素，不会合并多个数组。

   ```javascript
   _.uniq([2, 1, 2]); // => [2, 1]
   ```

综上所述，`union` 用于合并多个数组并去重，而 `uniq` 则用于去除单个数组中的重复元素。它们的使用场景和功能略有不同，根据具体的需求选择合适的函数。
 * 
 *  */
